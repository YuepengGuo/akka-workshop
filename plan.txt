basic branch:
- 2 enkle tester på compue-actor (2 typer work : Division og Addition fks) -> extends work. 
	Ser for oss tomme skall av klasser, med tom receive
- Test mot supervisor. Starter supervisor (med factory i constructor? eller noe lurere)
	spør denne om den har en barn-node via oppslag 
- Supervisor-actor må sendes beskjed om at barn-node skal startes (med en id på barnet elns)

scalable branch:
- supervisor tar i mot forespørsler, sender videre via en round-robin-router, 
distribueres til computeactors, gir svar
- client actor sender
	-> do work
		-> supervisor
		(monitorerer compute-actors, har en router)
- router distribuerer til compute-actors
- terminated fra compute actors propagerer via supervisor til clientactor
- router og supervisor registreres på toppnivå
- client-actor scheduling periodic messages med work. via en message til seg selv tenker jeg.


slides :
	- hva er akka (1-2 slides, uten kode)
	- motivasjon (1-2 slides)
	- kodeeksempler rettet mot å løse oppgavene 
		- lag en actor, hvordan sende beskjed
		- supervisors, Factory - hvorfor er den her? Kjekk for testing.
		- poison pill, stoppe systemet
		- restart : dersom divisjon gir aritmetisk exception kan actor restartes. Andre typer work/exception krever full stopp!
	- siste slide er et hint om del 2, så folk ser det kommer noe mer
